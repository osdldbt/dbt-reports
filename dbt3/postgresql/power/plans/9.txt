BEGIN;
BEGIN
EXPLAIN
select
	nation,
	o_year,
	sum(amount) as sum_profit
from
	(
		select
			n_name as nation,
			extract(year from o_orderdate) as o_year,
			l_extendedprice * (1 - l_discount) - ps_supplycost * l_quantity as amount
		from
			part,
			supplier,
			lineitem,
			partsupp,
			orders,
			nation
		where
			s_suppkey = l_suppkey
			and ps_suppkey = l_suppkey
			and ps_partkey = l_partkey
			and p_partkey = l_partkey
			and o_orderkey = l_orderkey
			and s_nationkey = n_nationkey
			and p_name like '%floral%'
	) as profit
group by
	nation,
	o_year
order by
	nation,
	o_year desc;
                                                                                  QUERY PLAN                                                                                  
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Finalize GroupAggregate  (cost=1333704.04..1333719.47 rows=114 width=90)
   Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
   ->  Gather Merge  (cost=1333704.04..1333716.80 rows=96 width=90)
         Workers Planned: 2
         ->  Partial GroupAggregate  (cost=1332704.02..1332705.70 rows=48 width=90)
               Group Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate))
               ->  Sort  (cost=1332704.02..1332704.14 rows=48 width=81)
                     Sort Key: nation.n_name, (EXTRACT(year FROM orders.o_orderdate)) DESC
                     ->  Hash Join  (cost=54341.26..1332702.68 rows=48 width=81)
                           Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                           ->  Nested Loop  (cost=54339.70..1332700.85 rows=48 width=31)
                                 ->  Nested Loop  (cost=54339.26..1332546.59 rows=48 width=35)
                                       Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                       ->  Parallel Hash Join  (cost=54338.70..271263.21 rows=165032 width=26)
                                             Hash Cond: (partsupp.ps_suppkey = supplier.s_suppkey)
                                             ->  Parallel Hash Join  (cost=51904.90..268387.33 rows=168402 width=18)
                                                   Hash Cond: (partsupp.ps_partkey = part.p_partkey)
                                                   ->  Parallel Seq Scan on partsupp  (cost=0.00..207729.69 rows=3334369 width=14)
                                                   ->  Parallel Hash  (cost=51378.80..51378.80 rows=42088 width=4)
                                                         ->  Parallel Seq Scan on part  (cost=0.00..51378.80 rows=42088 width=4)
                                                               Filter: ((p_name)::text ~~ '%floral%'::text)
                                             ->  Parallel Hash  (cost=1912.96..1912.96 rows=41667 width=8)
                                                   ->  Parallel Index Only Scan using supplier_s_nationkey_s_suppkey_idx on supplier  (cost=0.29..1912.96 rows=41667 width=8)
                                       ->  Index Scan using lineitem_l_partkey_l_suppkey_l_shipdate_l_quantity_idx on lineitem  (cost=0.56..6.42 rows=1 width=33)
                                             Index Cond: ((l_partkey = partsupp.ps_partkey) AND (l_suppkey = partsupp.ps_suppkey))
                                 ->  Index Only Scan using orders_o_orderkey_o_orderdate_idx on orders  (cost=0.43..3.21 rows=1 width=12)
                                       Index Cond: (o_orderkey = lineitem.l_orderkey)
                           ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                 ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(29 rows)

COMMIT;
COMMIT
