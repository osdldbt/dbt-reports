BEGIN;
BEGIN
EXPLAIN
select
	s_name,
	count(*) as numwait
from
	supplier,
	lineitem l1,
	orders,
	nation
where
	s_suppkey = l1.l_suppkey
	and o_orderkey = l1.l_orderkey
	and o_orderstatus = 'F'
	and l1.l_receiptdate > l1.l_commitdate
	and exists (
		select
			*
		from
			lineitem l2
		where
			l2.l_orderkey = l1.l_orderkey
			and l2.l_suppkey <> l1.l_suppkey
	)
	and not exists (
		select
			*
		from
			lineitem l3
		where
			l3.l_orderkey = l1.l_orderkey
			and l3.l_suppkey <> l1.l_suppkey
			and l3.l_receiptdate > l3.l_commitdate
	)
	and s_nationkey = n_nationkey
	and n_name = 'CHINA'
group by
	s_name
order by
	numwait desc,
	s_name
LIMIT 100;
                                                                                     QUERY PLAN                                                                                      
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=781851.84..781851.85 rows=1 width=34)
   ->  Sort  (cost=781851.84..781851.85 rows=1 width=34)
         Sort Key: (count(*)) DESC, supplier.s_name
         ->  GroupAggregate  (cost=781851.81..781851.83 rows=1 width=34)
               Group Key: supplier.s_name
               ->  Sort  (cost=781851.81..781851.82 rows=1 width=26)
                     Sort Key: supplier.s_name
                     ->  Nested Loop  (cost=4017.69..781851.80 rows=1 width=26)
                           ->  Nested Loop Semi Join  (cost=4017.26..781844.46 rows=1 width=42)
                                 ->  Gather  (cost=4016.69..781837.16 rows=1 width=38)
                                       Workers Planned: 2
                                       ->  Nested Loop Anti Join  (cost=3016.69..780837.06 rows=1 width=38)
                                             ->  Parallel Hash Join  (cost=3016.13..527935.31 rows=331458 width=38)
                                                   Hash Cond: (l1.l_suppkey = supplier.s_suppkey)
                                                   ->  Parallel Index Only Scan using lineitem_l_orderkey_l_suppkey_idx on lineitem l1  (cost=0.56..491696.53 rows=8339578 width=12)
                                                   ->  Parallel Hash  (cost=2986.15..2986.15 rows=2353 width=30)
                                                         ->  Hash Join  (cost=1.32..2986.15 rows=2353 width=30)
                                                               Hash Cond: (supplier.s_nationkey = nation.n_nationkey)
                                                               ->  Parallel Seq Scan on supplier  (cost=0.00..2804.24 rows=58824 width=34)
                                                               ->  Hash  (cost=1.31..1.31 rows=1 width=4)
                                                                     ->  Seq Scan on nation  (cost=0.00..1.31 rows=1 width=4)
                                                                           Filter: (n_name = 'CHINA'::bpchar)
                                             ->  Index Only Scan using lineitem_l_orderkey_l_suppkey_idx on lineitem l3  (cost=0.56..5.10 rows=50 width=12)
                                                   Index Cond: (l_orderkey = l1.l_orderkey)
                                                   Filter: (l_suppkey <> l1.l_suppkey)
                                 ->  Index Only Scan using lineitem_l_orderkey_l_suppkey_l_quantity_idx on lineitem l2  (cost=0.56..7.27 rows=150 width=12)
                                       Index Cond: (l_orderkey = l1.l_orderkey)
                                       Filter: (l_suppkey <> l1.l_suppkey)
                           ->  Index Scan using pk_orders on orders  (cost=0.43..7.34 rows=1 width=8)
                                 Index Cond: (o_orderkey = l1.l_orderkey)
                                 Filter: (o_orderstatus = 'F'::bpchar)
(31 rows)

COMMIT;
COMMIT
