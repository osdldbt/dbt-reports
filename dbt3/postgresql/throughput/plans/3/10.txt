BEGIN;
BEGIN
EXPLAIN
select
	c_custkey,
	c_name,
	sum(l_extendedprice * (1 - l_discount)) as revenue,
	c_acctbal,
	n_name,
	c_address,
	c_phone,
	c_comment
from
	customer,
	orders,
	lineitem,
	nation
where
	c_custkey = o_custkey
	and l_orderkey = o_orderkey
	and o_orderdate >= date '1993-06-01'
	and o_orderdate < cast(date '1993-06-01' + interval '3 month' as date)
	and l_returnflag = 'R'
	and c_nationkey = n_nationkey
group by
	c_custkey,
	c_name,
	c_acctbal,
	c_phone,
	n_name,
	c_address,
	c_comment
order by
	revenue desc
LIMIT 20;
                                                                                   QUERY PLAN                                                                                   
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Limit  (cost=1192073.24..1192073.29 rows=20 width=202)
   ->  Sort  (cost=1192073.24..1193439.32 rows=546435 width=202)
         Sort Key: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))) DESC
         ->  Finalize GroupAggregate  (cost=1107327.44..1177532.80 rows=546435 width=202)
               Group Key: customer.c_custkey, nation.n_name
               ->  Gather Merge  (cost=1107327.44..1166148.74 rows=455362 width=202)
                     Workers Planned: 2
                     ->  Partial GroupAggregate  (cost=1106327.41..1112588.64 rows=227681 width=202)
                           Group Key: customer.c_custkey, nation.n_name
                           ->  Sort  (cost=1106327.41..1106896.62 rows=227681 width=182)
                                 Sort Key: customer.c_custkey, nation.n_name
                                 ->  Hash Join  (cost=429497.64..1065834.11 rows=227681 width=182)
                                       Hash Cond: (customer.c_nationkey = nation.n_nationkey)
                                       ->  Parallel Hash Join  (cost=429496.08..1065133.57 rows=227681 width=160)
                                             Hash Cond: (orders.o_custkey = customer.c_custkey)
                                             ->  Parallel Hash Join  (cost=366176.90..985563.73 rows=227681 width=16)
                                                   Hash Cond: (lineitem.l_orderkey = orders.o_orderkey)
                                                   ->  Parallel Index Scan using lineitem_l_orderkey_idx_l_returnflag on lineitem  (cost=0.43..529940.86 rows=6157110 width=20)
                                                   ->  Parallel Hash  (cost=362154.78..362154.78 rows=231335 width=12)
                                                         ->  Parallel Seq Scan on orders  (cost=0.00..362154.78 rows=231335 width=12)
                                                               Filter: ((o_orderdate >= '1993-06-01'::date) AND (o_orderdate < '1993-09-01'::date))
                                             ->  Parallel Hash  (cost=42077.30..42077.30 rows=625030 width=148)
                                                   ->  Parallel Seq Scan on customer  (cost=0.00..42077.30 rows=625030 width=148)
                                       ->  Hash  (cost=1.25..1.25 rows=25 width=30)
                                             ->  Seq Scan on nation  (cost=0.00..1.25 rows=25 width=30)
(25 rows)

COMMIT;
COMMIT
